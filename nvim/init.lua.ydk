-- Neovim 0.11.3 için güncel init.lua (LSP + DAP + OSC52 + BasedPyright + Otomatik Mason kurulum + Dracula Pro)
-- Bu dosyayı ~/.config/nvim/init.lua olarak kaydedin

-- ================ Temel Ayarlar ================
vim.opt.number = true
vim.opt.relativenumber = false
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true
vim.opt.smartindent = true
vim.opt.wrap = false
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.undofile = true
vim.opt.hlsearch = false
vim.opt.incsearch = true
vim.opt.termguicolors = true
vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.updatetime = 50
vim.opt.colorcolumn = "80"
vim.opt.mouse = "a"
vim.opt.clipboard = "unnamedplus" -- + register'i kullan
vim.g.loaded_perl_provider = 0
vim.opt.fillchars = { eob = " " }

-- SSH ile bağlanıyorsanız yerel (macOS) panoya kopya için OSC52 sağlayıcısını kullan (0.11+)
if vim.env.SSH_TTY then
  local ok, cb = pcall(require, "vim.ui.clipboard")
  if ok and cb and type(cb.osc52) == "function" then
    vim.g.clipboard = cb.osc52()
  else
    -- Çok eski bir kurulumsa minimal fallback; 0.11'de normalde gerekmez
    vim.g.clipboard = vim.g.clipboard or {}
  end
end

-- Leader tuşu
vim.g.mapleader = " "

-- ================ Lazy.nvim Bootstrap ================
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
-- 0.12'de kaldırılacak uyarısından kaçınmak için vim.loop yerine vim.uv kullanın
local uv = vim.uv
if not uv.fs_stat(lazypath) then
  vim.fn.system({"git","clone","--filter=blob:none","https://github.com/folke/lazy.nvim.git","--branch=stable",lazypath})
end
vim.opt.rtp:prepend(lazypath)

-- ================ Yardımcılar ================
-- Luarocks modüllerini (ör. jsregexp) otomatik tanıt (varsa)
pcall(require, "luarocks.loader")
local function ensure_mason_packages(list)
  local ok, registry = pcall(require, "mason-registry")
  if not ok then return end
  pcall(function() registry.refresh() end)
  for _, name in ipairs(list) do
    local ok_pkg, pkg = pcall(registry.get_package, name)
    if ok_pkg and pkg and not pkg:is_installed() then
      pkg:install() -- async kurulur; sonraki açılışta hazır
    end
  end
end

local function warn_if_no_node()
  if vim.fn.executable('node') == 0 then
    vim.schedule(function()
      vim.notify("NodeJS bulunamadı. HTML/CSS/TS LSP ve js-debug-adapter için gereklidir.", vim.log.levels.WARN)
    end)
  end
end

-- Proje sanal ortamı (Python) tespiti: .venv/venv/ENV veya $VIRTUAL_ENV
local function project_python()
  local env = vim.env.VIRTUAL_ENV
  if env and #env > 0 then
    local p = env .. "/bin/python"
    if vim.fn.executable(p) == 1 then return p end
  end
  -- kökten yukarı .venv/venv/ENV ara
  local fname = vim.api.nvim_buf_get_name(0)
  local start = (fname ~= "" and vim.fs.dirname(fname)) or uv.cwd()
  local markers = { ".venv/bin/python", "venv/bin/python", "ENV/bin/python" }
  for _, m in ipairs(markers) do
    local found = vim.fs.find(m, { path = start, upward = true })[1]
    if found and vim.fn.executable(found) == 1 then return found end
  end
  return nil
end

-- ================ Özel Dracula Pro Teması ================
local function setup_dracula_pro()
  -- Renk paletini tanımla
  local colors = {
    bg       = '#22212c',
    fg       = '#f8f8f2',
    cursor   = '#f8f8f2',
    sel_bg   = '#454158',
    black    = '#22212c',
    black_b  = '#6272a4',
    red      = '#ff9580',
    red_b    = '#ffaa99',
    green    = '#8aff80',
    green_b  = '#a2ff99',
    yellow   = '#ffff80',
    yellow_b = '#ffff99',
    blue     = '#9580ff',
    blue_b   = '#aa99ff',
    magenta  = '#ff80bf',
    magenta_b= '#ff99cc',
    cyan     = '#80ffea',
    cyan_b   = '#99ffee',
    white    = '#f8f8f2',
    white_b  = '#ffffff'
  }

  -- Renk adını ayarla
  vim.g.colors_name = "dracula-pro"
  
  -- Syntax'i sıfırla
  vim.cmd('hi clear')
  if vim.fn.exists('syntax_on') then
    vim.cmd('syntax reset')
  end
  
  -- Temel vurgular
  local highlights = {
    -- Temel
    Normal = { fg = colors.fg, bg = colors.bg },
    Cursor = { fg = colors.bg, bg = colors.cursor },
    CursorLine = { bg = colors.sel_bg },
    Visual = { bg = colors.sel_bg, fg = colors.fg },
    
    -- Syntax renkleri
    Comment = { fg = colors.black_b },
    Constant = { fg = colors.cyan },
    String = { fg = colors.green },
    Number = { fg = colors.yellow },
    Boolean = { fg = colors.yellow },
    Function = { fg = colors.blue },
    Identifier = { fg = colors.red },
    Statement = { fg = colors.red },
    PreProc = { fg = colors.magenta },
    Type = { fg = colors.yellow },
    Special = { fg = colors.cyan },
    Error = { fg = colors.red, bg = colors.black },
    Todo = { fg = colors.white, bg = colors.yellow },
    
    -- UI Bileşenleri
    LineNr = { fg = colors.black_b, bg = colors.bg },
    CursorLineNr = { fg = colors.yellow, bg = colors.sel_bg },
    StatusLine = { fg = colors.fg, bg = colors.sel_bg, bold = true },
    StatusLineNC = { fg = colors.black_b, bg = colors.bg },
    VertSplit = { fg = colors.sel_bg, bg = colors.sel_bg },
    TabLine = { fg = colors.fg, bg = colors.bg },
    TabLineSel = { fg = colors.fg, bg = colors.sel_bg },
    Pmenu = { fg = colors.fg, bg = colors.sel_bg },
    PmenuSel = { fg = colors.fg, bg = colors.blue },
    MatchParen = { fg = colors.red, bg = colors.sel_bg },
    
    -- Diff
    DiffAdd = { fg = colors.green, bg = colors.bg },
    DiffChange = { fg = colors.yellow, bg = colors.bg },
    DiffDelete = { fg = colors.red, bg = colors.bg },
    DiffText = { fg = colors.blue, bg = colors.bg },
    
    -- LSP ve Diagnostic
    DiagnosticError = { fg = colors.red },
    DiagnosticWarn = { fg = colors.yellow },
    DiagnosticInfo = { fg = colors.blue },
    DiagnosticHint = { fg = colors.cyan },
    
    -- Gitsigns
    GitSignsAdd = { fg = colors.green },
    GitSignsChange = { fg = colors.yellow },
    GitSignsDelete = { fg = colors.red },
    
    -- Telescope
    TelescopeNormal = { fg = colors.fg, bg = colors.bg },
    TelescopeBorder = { fg = colors.sel_bg, bg = colors.bg },
    TelescopeSelection = { fg = colors.fg, bg = colors.sel_bg },
    TelescopeMatching = { fg = colors.blue },
    
    -- Nvim Tree
    NvimTreeNormal = { fg = colors.fg, bg = colors.bg },
    NvimTreeFolderIcon = { fg = colors.blue },
    NvimTreeFolderName = { fg = colors.blue },
    NvimTreeOpenedFolderName = { fg = colors.blue_b },
    NvimTreeFileIcon = { fg = colors.fg },
    NvimTreeFileName = { fg = colors.fg },
    NvimTreeGitDirty = { fg = colors.yellow },
    NvimTreeGitNew = { fg = colors.green },
    NvimTreeGitDeleted = { fg = colors.red },
    
    -- Lualine için özel renkler
    LualineNormal = { fg = colors.fg, bg = colors.sel_bg },
    LualineInsert = { fg = colors.bg, bg = colors.green },
    LualineVisual = { fg = colors.bg, bg = colors.magenta },
    LualineReplace = { fg = colors.bg, bg = colors.red },
    LualineCommand = { fg = colors.bg, bg = colors.yellow },
  }
  
  -- Highlight gruplarını uygula
  for group, settings in pairs(highlights) do
    vim.api.nvim_set_hl(0, group, settings)
  end
  
  return colors
end

-- ================ Eklentiler ================
require("lazy").setup({
  -- Özel Dracula Pro Teması
  {
    "dracula/vim",
    name = "dracula-pro",
    lazy = false,
    priority = 1000,
    config = function() 
      setup_dracula_pro()
    end,
  },

  -- Treesitter
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      require("nvim-treesitter.configs").setup({
        ensure_installed = {
          "rust","python","typescript","javascript","html","css",
          "lua","vim","vimdoc","toml","json","yaml"
        },
        sync_install = false,
        auto_install = true,
        highlight = { enable = true, additional_vim_regex_highlighting = false },
        indent = { enable = true, disable = {} },
      })
    end,
  },
  {
    "echasnovski/mini.nvim",
    version = false, -- stable değil, son sürümü al
    config = function()
      -- Sadece icons modülünü aktive etmek istiyorsan:
      require("mini.icons").setup()
      -- veya tüm mini modüllerini kullanmak istiyorsan:
      -- require('mini').setup() -- bu gerekli değil, sadece ihtiyacın olanları çağırman yeterli
    end,
  },
  -- Mason
  { "williamboman/mason.nvim", config = function()
      require("mason").setup({ ui = { icons = { package_installed = "✓", package_pending = "➜", package_uninstalled = "✗" } } })
      warn_if_no_node()
      ensure_mason_packages({
        -- LSP araçları
        "lua-language-server", "basedpyright", "html-lsp", "css-lsp", "typescript-language-server",
        -- DAP adapterları
        "codelldb", "debugpy", "js-debug-adapter",
      })
    end },

  -- mason-lspconfig (LSP sunucularını kur/etkinleştir)
  { "williamboman/mason-lspconfig.nvim",
    dependencies = { "williamboman/mason.nvim" },
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = {
          "rust_analyzer",
          "denols",
          "basedpyright",
          "ts_ls",
          "html",
          "cssls",
          "lua_ls",
        },
        automatic_installation = true,
      })
    end },

  -- LSP (nvim-lspconfig)
  { "neovim/nvim-lspconfig",
    dependencies = { "williamboman/mason.nvim", "williamboman/mason-lspconfig.nvim", "hrsh7th/cmp-nvim-lsp" },
    config = function()
      local lspconfig = require("lspconfig")
      local capabilities = require("cmp_nvim_lsp").default_capabilities(vim.lsp.protocol.make_client_capabilities())

      -- Kök klasör bulucu (vim.fs ile yukarı doğru arama)
      local function root(patterns)
        return function(fname)
          local path = fname
          if not path or path == "" then path = vim.api.nvim_buf_get_name(0) end
          local found = vim.fs.find(patterns, { path = vim.fs.dirname(path), upward = true })
          return found[1] and vim.fs.dirname(found[1]) or nil
        end
      end

      -- Rust
      lspconfig.rust_analyzer.setup({
        capabilities = capabilities,
        settings = {
          ["rust-analyzer"] = {
            cargo = { allFeatures = true },
            checkOnSave = true,
            check = { command = "clippy" },  
            procMacro = { enable = true },
          },
        },
      })

      -- Python (BasedPyright)
      lspconfig.basedpyright.setup({
        capabilities = capabilities,
        settings = {
          basedpyright = {
            analysis = {
              typeCheckingMode = "standard",    -- "recommended"/"strict" de olabilir
              autoImportCompletions = true,
              autoSearchPaths = true,
              diagnosticMode = "workspace",
            },
          },
        },
      })

      -- Deno
      lspconfig.denols.setup({
        capabilities = capabilities,
        root_dir = root({ "deno.json", "deno.jsonc" }),
        init_options = { lint = true, unstable = true },
      })

      -- TypeScript/JavaScript (Node projeleri)
      lspconfig.ts_ls.setup({
        capabilities = capabilities,
        root_dir = root({ "package.json", "tsconfig.json", "jsconfig.json" }),
        single_file_support = false,
        settings = {
          typescript = { inlayHints = {
            includeInlayParameterNameHints = "all",
            includeInlayParameterNameHintsWhenArgumentMatchesName = false,
            includeInlayFunctionParameterTypeHints = true,
            includeInlayVariableTypeHints = true,
            includeInlayPropertyDeclarationTypeHints = true,
            includeInlayFunctionLikeReturnTypeHints = true,
            includeInlayEnumMemberValueHints = true,
          }},
          javascript = { inlayHints = {
            includeInlayParameterNameHints = "all",
            includeInlayParameterNameHintsWhenArgumentMatchesName = false,
            includeInlayFunctionParameterTypeHints = true,
            includeInlayVariableTypeHints = true,
            includeInlayPropertyDeclarationTypeHints = true,
            includeInlayFunctionLikeReturnTypeHints = true,
            includeInlayEnumMemberValueHints = true,
          }},
        },
      })

      -- HTML
      lspconfig.html.setup({ capabilities = capabilities, filetypes = { "html", "templ" } })

      -- CSS
      lspconfig.cssls.setup({
        capabilities = capabilities,
        settings = {
          css = { validate = true, lint = { unknownAtRules = "ignore" } },
          scss = { validate = true, lint = { unknownAtRules = "ignore" } },
        },
      })

      -- Lua
      lspconfig.lua_ls.setup({
        capabilities = capabilities,
        settings = {
          Lua = {
            runtime = { version = "LuaJIT" },
            diagnostics = { globals = { "vim" } },
            workspace = { library = vim.api.nvim_get_runtime_file("", true), checkThirdParty = false },
            telemetry = { enable = false },
            hint = { enable = true },
          },
        },
      })
    end },

  -- nvim-cmp + LuaSnip
  { "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp","hrsh7th/cmp-buffer","hrsh7th/cmp-path","hrsh7th/cmp-cmdline",
      { "L3MON4D3/LuaSnip", build = "make install_jsregexp", version = "v2.*" },"saadparwaiz1/cmp_luasnip","rafamadriz/friendly-snippets",
    },
    config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")
      require("luasnip.loaders.from_vscode").lazy_load()
      cmp.setup({
        snippet = { expand = function(args) luasnip.lsp_expand(args.body) end },
        window = { completion = cmp.config.window.bordered(), documentation = cmp.config.window.bordered() },
        mapping = cmp.mapping.preset.insert({
          ["<C-b>"] = cmp.mapping.scroll_docs(-4),
          ["<C-f>"] = cmp.mapping.scroll_docs(4),
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<C-e>"] = cmp.mapping.abort(),
          ["<CR>"] = cmp.mapping.confirm({ select = true }),
          ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then luasnip.expand_or_jump()
            else fallback() end
          end, { "i","s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then luasnip.jump(-1)
            else fallback() end
          end, { "i","s" }),
        }),
        sources = cmp.config.sources({ { name = "nvim_lsp" }, { name = "luasnip" }, { name = "crates" } }, { { name = "buffer" }, { name = "path" } }),
        formatting = { format = function(entry, item)
          item.kind = string.format("%s", item.kind)
          item.menu = ({ nvim_lsp = "[LSP]", luasnip = "[Snip]", buffer = "[Buf]", path = "[Path]", crates = "[Crates]" })[entry.source.name]
          return item
        end },
      })
      cmp.setup.cmdline({ "/","?" }, { mapping = cmp.mapping.preset.cmdline(), sources = { { name = "buffer" } } })
      cmp.setup.cmdline(":", { mapping = cmp.mapping.preset.cmdline(), sources = cmp.config.sources({ { name = "path" } }, { { name = "cmdline" } }) })
    end },

  -- Dosya gezgini
  { "nvim-tree/nvim-tree.lua",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      vim.g.loaded_netrw, vim.g.loaded_netrwPlugin = 1, 1
      require("nvim-tree").setup({
        view = { width = 30, side = "left" },
        renderer = { group_empty = true, icons = { show = { file = true, folder = true, folder_arrow = true, git = true } } },
        filters = { dotfiles = false },
      })
      vim.keymap.set("n", "<leader>e", ":NvimTreeToggle<CR>", { silent = true })
    end },

  -- Durum çubuğu (Dracula Pro renkleri ile)
  { "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      -- Dracula Pro için özel lualine teması
      local dracula_pro_theme = {
        normal = {
          a = { bg = '#9580ff', fg = '#22212c', gui = 'bold' },
          b = { bg = '#454158', fg = '#f8f8f2' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
        insert = {
          a = { bg = '#8aff80', fg = '#22212c', gui = 'bold' },
          b = { bg = '#454158', fg = '#f8f8f2' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
        visual = {
          a = { bg = '#ff80bf', fg = '#22212c', gui = 'bold' },
          b = { bg = '#454158', fg = '#f8f8f2' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
        replace = {
          a = { bg = '#ff9580', fg = '#22212c', gui = 'bold' },
          b = { bg = '#454158', fg = '#f8f8f2' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
        command = {
          a = { bg = '#ffff80', fg = '#22212c', gui = 'bold' },
          b = { bg = '#454158', fg = '#f8f8f2' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
        inactive = {
          a = { bg = '#454158', fg = '#6272a4' },
          b = { bg = '#454158', fg = '#6272a4' },
          c = { bg = '#22212c', fg = '#6272a4' },
        },
      }
      
      require("lualine").setup({
        options = { 
          theme = dracula_pro_theme, 
          component_separators = { left = "", right = "" }, 
          section_separators = { left = "", right = "" } 
        },
        sections = {
          lualine_a = { "mode" },
          lualine_b = { "branch", "diff", "diagnostics" },
          lualine_c = { "filename" },
          lualine_x = { "encoding", "fileformat", "filetype" },
          lualine_y = { "progress" },
          lualine_z = { "location" },
        },
      })
    end },

  -- Telescope + FZF
  { "nvim-telescope/telescope.nvim",
    tag = "0.1.8",
    dependencies = { "nvim-lua/plenary.nvim", { "nvim-telescope/telescope-fzf-native.nvim", build = "make" } },
    config = function()
      local telescope = require("telescope")
      local builtin = require("telescope.builtin")
      telescope.setup({ defaults = { file_ignore_patterns = { "node_modules", ".git/" } }, extensions = { fzf = { fuzzy = true, override_generic_sorter = true, override_file_sorter = true, case_mode = "smart_case" } } })
      telescope.load_extension("fzf")
      vim.keymap.set("n", "<leader>ff", builtin.find_files, {})
      vim.keymap.set("n", "<leader>fg", builtin.live_grep, {})
      vim.keymap.set("n", "<leader>fb", builtin.buffers, {})
      vim.keymap.set("n", "<leader>fh", builtin.help_tags, {})
      vim.keymap.set("n", "<leader>fd", builtin.diagnostics, {})
    end },

  -- Git
  { "lewis6991/gitsigns.nvim",
    config = function()
      require("gitsigns").setup({
        signs = { add = { text = "│" }, change = { text = "│" }, delete = { text = "_" }, topdelete = { text = "‾" }, changedelete = { text = "~" }, untracked = { text = "┆" } },
        current_line_blame = false,
        on_attach = function(bufnr)
          local gs = package.loaded.gitsigns
          local function map(mode, l, r, opts) opts = opts or {}; opts.buffer = bufnr; vim.keymap.set(mode, l, r, opts) end
          map("n", "]c", function() if vim.wo.diff then return "]c" end vim.schedule(function() gs.next_hunk() end) return "<Ignore>" end, { expr = true })
          map("n", "[c", function() if vim.wo.diff then return "[c" end vim.schedule(function() gs.prev_hunk() end) return "<Ignore>" end, { expr = true })
          map("n", "<leader>hs", gs.stage_hunk)
          map("n", "<leader>hr", gs.reset_hunk)
          map("v", "<leader>hs", function() gs.stage_hunk { vim.fn.line('.'), vim.fn.line('v') } end)
          map("v", "<leader>hr", function() gs.reset_hunk { vim.fn.line('.'), vim.fn.line('v') } end)
          map("n", "<leader>hS", gs.stage_buffer)
          map("n", "<leader>hu", gs.undo_stage_hunk)
          map("n", "<leader>hR", gs.reset_buffer)
          map("n", "<leader>hp", gs.preview_hunk)
          map("n", "<leader>hb", function() gs.blame_line { full = true } end)
          map("n", "<leader>tb", gs.toggle_current_line_blame)
          map("n", "<leader>hd", gs.diffthis)
          map("n", "<leader>hD", function() gs.diffthis("~") end)
          map("n", "<leader>td", gs.toggle_deleted)
        end,
      })
    end },

  -- Otomatik çift karakterler
  { "windwp/nvim-autopairs",
    event = "InsertEnter",
    config = function()
      local npairs = require("nvim-autopairs")
      npairs.setup({ check_ts = true })
      local cmp_autopairs = require("nvim-autopairs.completion.cmp")
      local cmp = require("cmp")
      cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
    end },

  -- Yorum satırı
  { "numToStr/Comment.nvim", config = function() require("Comment").setup() end },

  -- Renk gösterimi (bakımlı çatal)
  { "NvChad/nvim-colorizer.lua", config = function() require("colorizer").setup() end },

  -- Cargo.toml için crates.nvim
  { "saecki/crates.nvim", tag = "stable", event = { "BufRead Cargo.toml" }, dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      require("crates").setup({ completion = { cmp = { enabled = true } }, lsp = { enabled = true, actions = true, completion = true, hover = true } })
      vim.api.nvim_create_autocmd("BufRead", {
        group = vim.api.nvim_create_augroup("CratesKeymaps", { clear = true }),
        pattern = "Cargo.toml",
        callback = function()
          local crates = require("crates"); local opts = { silent = true, buffer = true }
          vim.keymap.set("n", "<leader>ct", crates.toggle, opts)
          vim.keymap.set("n", "<leader>cr", crates.reload, opts)
          vim.keymap.set("n", "<leader>cv", crates.show_versions_popup, opts)
          vim.keymap.set("n", "<leader>cf", crates.show_features_popup, opts)
          vim.keymap.set("n", "<leader>cd", crates.show_dependencies_popup, opts)
          vim.keymap.set("n", "<leader>cu", crates.update_crate, opts)
          vim.keymap.set("v", "<leader>cu", crates.update_crates, opts)
          vim.keymap.set("n", "<leader>ca", crates.update_all_crates, opts)
          vim.keymap.set("n", "<leader>cU", crates.upgrade_crate, opts)
          vim.keymap.set("v", "<leader>cU", crates.upgrade_crates, opts)
          vim.keymap.set("n", "<leader>cA", crates.upgrade_all_crates, opts)
          vim.keymap.set("n", "<leader>cH", crates.open_homepage, opts)
          vim.keymap.set("n", "<leader>cR", crates.open_repository, opts)
          vim.keymap.set("n", "<leader>cD", crates.open_documentation, opts)
          vim.keymap.set("n", "<leader>cC", crates.open_crates_io, opts)
        end,
      })
    end },

  -- Indent kılavuzları
  { "lukas-reineke/indent-blankline.nvim", main = "ibl", config = function() require("ibl").setup({ indent = { char = "│" }, scope = { enabled = true, show_start = true, show_end = false } }) end },

  -- Which-key
  { "folke/which-key.nvim", event = "VeryLazy",
    init = function() vim.o.timeout = true; vim.o.timeoutlen = 300 end,
    config = function() require("which-key").setup({}) end },

  -- ===================== DAP (Debug) =====================
  { "mfussenegger/nvim-dap" },
  { "rcarriga/nvim-dap-ui", dependencies = { "mfussenegger/nvim-dap", "nvim-neotest/nvim-nio" }, config = function()
      local dap, dapui = require("dap"), require("dapui")
      dapui.setup()
      dap.listeners.after.event_initialized["dapui_config"] = function() dapui.open() end
      dap.listeners.before.event_terminated["dapui_config"] = function() dapui.close() end
      dap.listeners.before.event_exited["dapui_config"] = function() dapui.close() end
    end },
  { "theHamsta/nvim-dap-virtual-text", config = function() require("nvim-dap-virtual-text").setup() end },
  { "jay-babu/mason-nvim-dap.nvim",
    dependencies = { "williamboman/mason.nvim", "mfussenegger/nvim-dap" },
    config = function()
      require("mason-nvim-dap").setup({
        ensure_installed = { "codelldb", "debugpy", "js-debug-adapter" },
        automatic_installation = true,
        handlers = {},
      })
    end },
  -- JS/TS & Deno için vscode-js-debug
  { "mxsdev/nvim-dap-vscode-js",
    dependencies = { "mfussenegger/nvim-dap", "williamboman/mason.nvim" },
    config = function()
      local ok = pcall(require, "dap-vscode-js")
      if not ok then return end
      local dapjs = require("dap-vscode-js")
      local mason_pkg = vim.fn.stdpath("data") .. "/mason/packages/js-debug-adapter"
      if vim.fn.isdirectory(mason_pkg) == 0 then
        vim.notify("Mason: 'js-debug-adapter' kurulu değil. :MasonInstall js-debug-adapter", vim.log.levels.WARN)
        return
      end
      dapjs.setup({
        debugger_path = mason_pkg,
        adapters = { "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" },
      })
      local dap = require("dap")
      for _, language in ipairs({ "typescript", "javascript", "typescriptreact", "javascriptreact" }) do
        dap.configurations[language] = {
          {
            type = "pwa-node",
            request = "launch",
            name = "Node: Launch {file}",
            program = "${file}",
            cwd = "${workspaceFolder}",
            runtimeExecutable = "node",
            skipFiles = { "<node_internals>/**" },
          },
          {
            type = "pwa-node",
            request = "attach",
            name = "Node: Attach 9229",
            processId = require("dap.utils").pick_process,
            port = 9229,
            cwd = "${workspaceFolder}",
          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Deno: Run {file}",
            program = "${file}",
            cwd = "${workspaceFolder}",
            runtimeExecutable = "deno",
            runtimeArgs = { "run", "--inspect-wait", "--allow-all", "${file}" },
            attachSimplePort = 9229,
          },
        }
      end
    end },
  -- Python için kolay kurulum
  { "mfussenegger/nvim-dap-python", dependencies = { "mfussenegger/nvim-dap", "williamboman/mason.nvim" },
    config = function()
      local ok = pcall(require, "dap-python")
      if not ok then return end
      local dappy = require("dap-python")
      -- Öncelik: proje sanal ortamı -> Mason debugpy -> sistem python3
      local py = project_python()
      if not py then
        local mason_py = vim.fn.stdpath("data") .. "/mason/packages/debugpy/venv/bin/python"
        if vim.fn.executable(mason_py) == 1 then py = mason_py end
      end
      if not py then py = "python3" end
      if py == "python3" then
        vim.notify("Python debug için: proje .venv veya Mason 'debugpy' bulunamadı. :MasonInstall debugpy ya da projenizin venv'ine 'pip install debugpy' kurun.", vim.log.levels.WARN)
      end
      pcall(function() dappy.setup(py) end)
    end }
})

-- ================ LSP Kısayolları ================
vim.api.nvim_create_autocmd("LspAttach", {
  group = vim.api.nvim_create_augroup("UserLspConfig", {}),
  callback = function(ev)
    local opts = { buffer = ev.buf }
    vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
    vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
    vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
    vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
    vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
    vim.keymap.set("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set("n", "<leader>wl", function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, opts)
    vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, opts)
    vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
    vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts)
    vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
    vim.keymap.set("n", "<leader>f", function() vim.lsp.buf.format({ async = true }) end, opts)

    if vim.lsp.inlay_hint then
      vim.keymap.set("n", "<leader>ih", function()
        local buf = ev.buf
        local enable = not vim.lsp.inlay_hint.is_enabled({ bufnr = buf })
        vim.lsp.inlay_hint.enable(enable, { bufnr = buf })
      end, opts)
    end
  end,
})

-- ================ DAP Kısayolları ================
local dap_ok, dap = pcall(require, 'dap')
if dap_ok then
  vim.keymap.set('n', '<F5>', function() dap.continue() end)
  vim.keymap.set('n', '<F10>', function() dap.step_over() end)
  vim.keymap.set('n', '<F11>', function() dap.step_into() end)
  vim.keymap.set('n', '<S-F11>', function() dap.step_out() end)
  vim.keymap.set('n', '<leader>b', function() dap.toggle_breakpoint() end)
  vim.keymap.set('n', '<leader>B', function() dap.set_breakpoint(vim.fn.input('Koşul: ')) end)
  vim.keymap.set('n', '<leader>dr', function() dap.repl.open() end)
  vim.keymap.set('n', '<leader>du', function() require('dapui').toggle() end)
end

-- ================ Teşhis (Diagnostics) ================
vim.diagnostic.config({
  virtual_text = true,
  signs = true,
  underline = true,
  update_in_insert = false,
  severity_sort = true,
  float = { border = "rounded", source = "always" },
})

-- İşaret ikonları
local signs = { Error = "", Warn = "", Hint = "", Info = "" }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

--- Which-key Kısayol Açıklamaları
--- Bu bölüm, Neovim'i ilk açtığınızda `which-key` eklentisi tarafından gösterilecek olan kısayol açıklamalarını tanımlar.

vim.api.nvim_create_autocmd("User", {
  pattern = "VeryLazy",
  callback = function()
    local ok, wk = pcall(require, "which-key")
    if not ok then return end
    wk.setup({})

    -- which-key v2+ API: add (mevcut haritalara sadece açıklama ekler)
    if type(wk.add) == "function" then
      wk.add({
        -- Dosya Gezgini
        { "<leader>e",  desc = "Dosya gezgini Aç/Kapa", mode = "n" },

        -- Telescope
        { "<leader>f",  group = "Bul / Telescope" },
        { "<leader>ff", desc = "Dosya bul",                 mode = "n" },
        { "<leader>fg", desc = "Metin ara (live grep)",        mode = "n" },
        { "<leader>fb", desc = "Açık buffer'lar",            mode = "n" },
        { "<leader>fh", desc = "Yardım etiketleri",          mode = "n" },
        { "<leader>fd", desc = "Tanılama listesi",            mode = "n" },

        -- LSP (prefix ve tekil tuşlar)
        { "g",          group = "Git/Goto" },
        { "gD",         desc = "Declaration'a git",          mode = "n" },
        { "gd",         desc = "Definition'a git",           mode = "n" },
        { "gi",         desc = "Implementation'a git",       mode = "n" },
        { "gr",         desc = "Referansları göster",        mode = "n" },
        { "K",          desc = "Hover (sembol bilgisi)",     mode = "n" },

        { "<leader>w",  group = "Workspace" },
        { "<leader>wa", desc = "Klasör ekle",                mode = "n" },
        { "<leader>wr", desc = "Klasör kaldır",              mode = "n" },
        { "<leader>wl", desc = "Klasörleri listele",         mode = "n" },
        { "<leader>D",  desc = "Tür tanımı",                 mode = "n" },
        { "<leader>rn", desc = "Yeniden adlandır",           mode = "n" },
        { "<leader>ca", desc = "Kod eylemi",                 mode = { "n", "v" } },
        { "<leader>f",  desc = "Biçimlendir",                mode = "n" },
        { "<leader>ih", desc = "Inlay hints Aç/Kapa",        mode = "n" },

        -- Git (gitsigns)
        { "<leader>h",  group = "Git (Hunks)" },
        { "]c",         desc = "Sonraki hunk",               mode = "n" },
        { "[c",         desc = "Önceki hunk",                mode = "n" },
        { "<leader>hs", desc = "Hunk stage",                 mode = "n" },
        { "<leader>hr", desc = "Hunk reset",                 mode = "n" },
        { "<leader>hS", desc = "Buffer stage",               mode = "n" },
        { "<leader>hu", desc = "Stage geri al",              mode = "n" },
        { "<leader>hR", desc = "Buffer reset",               mode = "n" },
        { "<leader>hp", desc = "Hunk önizleme",              mode = "n" },
        { "<leader>hb", desc = "Satır blame (tam)",          mode = "n" },
        { "<leader>tb", desc = "Satır blame Aç/Kapa",        mode = "n" },
        { "<leader>hd", desc = "Diff (bu dosya)",            mode = "n" },
        { "<leader>hD", desc = "Diff (HEAD)",                mode = "n" },
        { "<leader>td", desc = "Silinenleri göster Aç/Kapa", mode = "n" },

        -- Crates (Cargo.toml)
        { "<leader>c",  group = "Crates" },
        { "<leader>ct", desc = "Crates paneli Aç/Kapa",      mode = "n" },
        { "<leader>cr", desc = "Yeniden yükle",              mode = "n" },
        { "<leader>cv", desc = "Versiyonları göster",        mode = "n" },
        { "<leader>cf", desc = "Özellikler (features)",      mode = "n" },
        { "<leader>cd", desc = "Bağımlılıklar",              mode = "n" },
        { "<leader>cu", desc = "Crate update",               mode = "n" },
        { "<leader>ca", desc = "Tümünü update",              mode = "n" },
        { "<leader>cU", desc = "Crate upgrade",              mode = "n" },
        { "<leader>cA", desc = "Tümünü upgrade",             mode = "n" },
        { "<leader>cH", desc = "Anasayfa",                   mode = "n" },
        { "<leader>cR", desc = "Repo",                       mode = "n" },
        { "<leader>cD", desc = "Dokümantasyon",              mode = "n" },
        { "<leader>cC", desc = "crates.io",                  mode = "n" },

        -- Debug (DAP)
        { "<leader>d",  group = "Debug" },
        { "<leader>b",  desc = "Breakpoint Aç/Kapa",         mode = "n" },
        { "<leader>B",  desc = "Koşullu breakpoint",         mode = "n" },
        { "<leader>dr", desc = "DAP REPL",                   mode = "n" },
        { "<leader>du", desc = "DAP UI Aç/Kapa",             mode = "n" },
      })
    end
  end,
})
